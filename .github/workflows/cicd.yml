name: CI/CD Pipeline
on:
  push:
    branches: [main]
  pull_request:

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Cache node_modules
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           node_modules
  #            /home/runner/.cache/Cypress
  #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #     - run: npm install
  #     - run: npm run build

  # test:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   strategy:
  #     matrix:
  #       browser: ["chrome", "edge"]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Cache node_modules
  #       uses: actions/cache/restore@v4
  #       with:
  #         path: |
  #           node_modules
  #            /home/runner/.cache/Cypress
  #         key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #     - uses: cypress-io/github-action@v6
  #       with:
  #         install: false
  #         start: npm run dev
  #         browser: ${{ matrix.browser }}
  #     - uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: cypress-videos-${{ matrix.browser }}
  #         path: cypress/videos
  #         retention-days: 5
  #     - uses: actions/upload-artifact@v4
  #       if: failure()
  #       with:
  #         name: cypress-screenshots-${{ matrix.browser }}
  #         path: cypress/screenshots
  #         retention-days: 5

  # deploy:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Préparer la clé SSH
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
  #         chmod 600 ~/.ssh/id_rsa
  #         ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

  #     - name: Déployer sur le serveur distant
  #       run: |
  #         ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
  #           cd next-cda1/ &&
  #           git pull origin main &&
  #           npm install &&
  #           npm run build &&
  #           pm2 reload next-cda1 || pm2 start npm --name next-cda1 -- run start
  #         "

  build-docker:
    runs-on: ubuntu-latest
    #needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Connexion à GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/thoomassc/next-cda1/next-app:latest
          platforms: linux/amd64
